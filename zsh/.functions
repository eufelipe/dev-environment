# Utilitários do Sistema

# Procurar texto em arquivos recursivamente
search() {
  find . -type f -name "$1" -exec grep -l "$2" {} \;
}

# Mostrar tamanho de diretórios de forma legível
dirsize() {
  du -h --max-depth=1 "$@" | sort -hr
}

# Limpar arquivos .DS_Store recursivamente
cleanup_ds_store() {
  find . -name ".DS_Store" -type f -delete
}

# Fazer backup de um arquivo
backup() {
  cp "$1" "$1.bak.$(date +%Y%m%d_%H%M%S)"
}

#  Navegação

# Navegar para cima múltiplos diretórios de uma vez
up() {
    local d=""
    local limit=$1

    # Valor padrão
    [ -z "$limit" ] && limit=1

    for ((i=1; i <= limit; i++)); do
      d="$d../"
    done

    if [ -z "$d" ]; then
      d=".."
    fi

    cd "$d" || return
}

# Mostra todos os caminhos no PATH de forma legível
path() {
  echo $PATH | tr ":" "\n"
}

#  Desenvolvimento Web/Mobile

# Limpar cache do NPM
npm_clean() {
    npm cache clean --force
    rm -rf node_modules
    rm package-lock.json
    npm install
}


# Abrir simulador do iOS
ios_simulator() {
  open -a Simulator
}

# Verificar se uma porta está em uso
port_check() {
  lsof -i :"$1"
}

# Produtividade

# Cria um diretório e faz cd nele de uma vez só
mkcd() {
  mkdir -p "$1"
  cd "$1" || exit
}

# Extrai vários tipos de arquivo (zip, tar, etc.) automaticamente
extract() {
  if [ -f "$1" ] ; then
    case "$1" in
      *.tar.bz2)   tar xjf "$1"   ;;
      *.tar.gz)    tar xzf "$1"   ;;
      *.bz2)       bunzip2 "$1"   ;;
      *.rar)       unrar x "$1"   ;;
      *.gz)        gunzip "$1"    ;;
      *.tar)       tar xf "$1"    ;;
      *.tbz2)      tar xjf "$1"   ;;
      *.tgz)       tar xzf "$1"   ;;
      *.zip)       unzip "$1"     ;;
      *.Z)         uncompress "$1";;
      *.7z)        7z x "$1"      ;;
      *)           echo "'$1' não pode ser extraído via extract()" ;;
    esac
  else
    echo "'$1' não é um arquivo válido"
  fi
}

# Sincronizar repositório rápido:
gsync() {
  git pull --rebase
  git push
}

# Puxa atualizações de todos os repositórios dentro de uma pasta:
gpullall() {
  for dir in */; do
    if [ -d "$dir/.git" ]; then
      echo "Atualizando $dir"
      (cd "$dir" && git pull --rebase)
    fi
  done
}

# Mata um processo pela porta:
killport() {
  if [ -z "$1" ]; then
    echo "Uso: killport <porta>"
  else
    lsof -t -i :"$1" | xargs kill -9
  fi
}

# GIT

# Clonar um repositório e fazer fork dele
fork() {
  repo_name=$(echo "$1" | xargs basename | cut -d. -f1)
  clone_path="$HOME/PROJETOS/CODE/forks/$repo_name"
  echo "Seu fork será clonado para $clone_path"
  git clone $1 "$clone_path"
  cd $clone_path
}



